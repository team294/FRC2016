// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team294.robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	//Creates the onjects for everything
    public static CANTalon driveTrainleftMotor1;
    public static CANTalon driveTrainleftMotor2;
    public static CANTalon driveTrainrightMotor1;
    public static CANTalon driveTrainrightMotor2;
    public static RobotDrive driveTrainRobotDrive;
    public static AnalogGyro driveTraingyro1;
    public static DigitalInput intakeButton;
    public static CANTalon shooterMotorTop;
    public static CANTalon shooterMotorBottom;
    public static DoubleSolenoid shooterPiston;
    

    public static void init() {
        // Instantiates all objects
        driveTrainleftMotor1 = new CANTalon(13);
        LiveWindow.addActuator("DriveTrain", "leftMotor1", driveTrainleftMotor1);
        
        driveTrainleftMotor2 = new CANTalon(12);
        LiveWindow.addActuator("DriveTrain", "leftMotor2", driveTrainleftMotor2);
        
        driveTrainrightMotor1 = new CANTalon(15);
        LiveWindow.addActuator("DriveTrain", "rightMotor1", driveTrainrightMotor1);
        
        driveTrainrightMotor2 = new CANTalon(16);
        LiveWindow.addActuator("DriveTrain", "rightMotor2", driveTrainrightMotor2);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainleftMotor1, driveTrainleftMotor2,
              driveTrainrightMotor1, driveTrainrightMotor2);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTraingyro1 = new AnalogGyro(1);
        LiveWindow.addSensor("DriveTrain", "gyro1", driveTraingyro1);
        driveTraingyro1.setSensitivity(0.007);
        
        intakeButton = new DigitalInput(9);
        
        shooterMotorTop = new CANTalon(5);
        shooterMotorTop.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Absolute);
        shooterMotorTop.configEncoderCodesPerRev(100);
        shooterMotorTop.reverseSensor(true);
        
        shooterMotorTop.configNominalOutputVoltage(+0.0f, -0.0f);
        shooterMotorTop.configPeakOutputVoltage(+12.0f, -12.0f);
        shooterMotorTop.setProfile(0);
        shooterMotorTop.setF(0.025);
        shooterMotorTop.setP(0.005);
        shooterMotorTop.setI(0.00008);
        shooterMotorTop.setD(0.00001);
        shooterMotorTop.changeControlMode(TalonControlMode.Speed);
        
        shooterMotorBottom = new CANTalon(11);
        shooterMotorBottom.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Absolute);
        shooterMotorBottom.configEncoderCodesPerRev(100);
        shooterMotorBottom.reverseSensor(true);
        
        shooterMotorBottom.configNominalOutputVoltage(+0.0f, -0.0f);
        shooterMotorBottom.configPeakOutputVoltage(+12.0f, -12.0f);
        shooterMotorBottom.setProfile(0);
        shooterMotorBottom.setF(0.025);
        shooterMotorBottom.setP(0.005);
        shooterMotorBottom.setI(0.00008);
        shooterMotorBottom.setD(0.00001);
        shooterMotorBottom.changeControlMode(TalonControlMode.Speed);
        
        LiveWindow.addActuator("Shooter", "shooterMotorTop", shooterMotorTop);
        
        shooterPiston = new DoubleSolenoid(1, 0);
        shooterPiston.set(DoubleSolenoid.Value.kReverse);
        LiveWindow.addActuator("Shooter", "shooterPiston", shooterPiston);
        
    }
}
